#include<stdio.h>
import numpy as np

def penal(x,y):
    if x == y:
        return 0
    else:
        return 1
        
def G_min(x,y,z):
    m = x
    if m > y:
        m = y
    if m > z:
        m = z
    return m    

def Rev(x): #转换回字符序列
    if x==0:
        return 'A'
    elif x==1:
        return 'T'
    elif x == 2:
        return 'C'
    elif x == 3:
        return 'G'
    else:
        return ' '

#输入两个序列
print ("Please input a sequence named X（连续输入，不需要分隔符）")
X_seq = input("input:")
print ("Please input a sequence named Y（连续输入，不需要分隔符）")
Y_seq = input("input:")

X_len = len(X_seq)
Y_len = len(Y_seq)

image = np.zeros([Y_len+2, X_len+2])

#将序列用数字对应出来，存在二维数组边界上；同时在外边界添加gap及gap对应的值
for i in range(1,Y_len+1):
    if Y_seq[i-1] == 'A':
        image[i][0] = 0
    elif Y_seq[i-1] == 'T':
        image[i][0] = 1
    elif Y_seq[i-1] == 'C':
        image[i][0] = 2
    elif Y_seq[i-1] == 'G':
        image[i][0] = 3
    image[i][X_len+1] = (Y_len-i+1)*2#添加gap
    
for j in range(1,X_len+1):
    if X_seq[j-1] == 'A':
        image[0][j] = 0
    elif X_seq[j-1] == 'T':
        image[0][j] = 1
    elif X_seq[j-1] == 'C':
        image[0][j] = 2
    elif X_seq[j-1] == 'G':
        image[0][j] = 3
    image[Y_len+1][j] = (X_len-j+1)*2

#从右下角（m，n）开始倒推回去，根据opt=min（）的算法算出整个矩阵每个位置的penalty
for k in range(Y_len, 0, -1):
    for l in range(X_len, 0, -1):
        p1 = image[k][l+1]+2
        p2 = image[k+1][l]+2
        p3 = image[k+1][l+1]+penal(image[k][0],image[0][l])
        image[k][l]=G_min(p1,p2,p3)

        
#寻找边界penalty最小的位置，如果不是（1，1），则记得添加开头对空的penalty
Y_min = image[1][1]
Y_M = 1
for m in range(1,Y_len+1):
    if Y_min > (image[m][1]+(m-1)*2):#如果开头有对空的penalty
        X_min = image[m][1]+(m-1)*2
        image[m][1]= image[m][1]+(m-1)*2
        Y_M = m
X_min = image[1][1]
X_N = 1
for n in range(1,X_len+1):
    if X_min > (image[1][n] +(n-1)*2):
        X_min = image[1][n]+(n-1)*2
        image[1][n]= image[1][n]+(n-1)*2
        X_N = n
#得到最小的penalty        
M = 1
N = 1
if Y_min >= X_min:
    N = X_N
else:
    M = Y_M

print("最小对齐惩罚为：%d"%image[M][N])

#计算对齐，从（1，1）开始，按照三个方向比较
#如果下一次向下更小，则下一个对齐给y方向对空，向右则下一个对齐给x方向对空，向右下则直接是当前位置对齐
h=1
g=1
if X_len>Y_len:
    length = X_len
else:
    length = Y_len
while g < length:        
    q1 = image[h][g+1]
    q2 = image[h+1][g]
    q3 = image[h+1][g+1]
    ww=G_min(q1,q2,q3) 
    if g==1 or h==1:  #如果是起始处，就要自己和下一个
        if ww==q3 or image[h+1][g+1]== image[h][g]:
            print("%c,"%Rev(image[0][g]),end='')
            print("%c"%Rev(image[h][0]))
            print("%c,"%Rev(image[0][g+1]),end='')
            print("%c"%Rev(image[h+1][0]))
            g+=1
            h+=1
        else:
            if ww==q2:
                print("%c,"%Rev(-1),end='')
                print("%c"%Rev(image[h][0]))
                h +=1
            else:        
                print("%c,"%Rev(image[0][g]),end='')
                print("%c"%Rev(-1))
                g +=1
    else:     #非边界（初始处）则直接输出下一个对齐   
        if ww==q3:
            print("%c,"%Rev(image[0][g+1]),end='')
            print("%c"%Rev(image[h+1][0]))
            g+=1
            h+=1
        else:
            if ww==q2:
                print("%c,"%Rev(-1),end='')
                print("%c"%Rev(image[h+1][0]))
                h +=1
            else:        
                print("%c,"%Rev(image[0][g+1]),end='')
                print("%c"%Rev(-1))
                g +=1
                  
print("作者——刘博-2016141463153")
